# -*- coding: utf-8 -*-
"""UNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17muCEkFdXrZtZEw4ff_YXFNBrf9u58AV
"""

import numpy as np
import os
import tensorflow as tf
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Access a specific folder
folder_path = "/content/drive/My Drive/archive"

import shutil

# Copy the folder to the current Colab directory
shutil.copytree(folder_path, "archive")

image_path = "/content/archive/segmentation_full_body_tik_tok_2615_img/segmentation_full_body_tik_tok_2615_img/images"

mask_path = "/content/archive/segmentation_full_body_tik_tok_2615_img/segmentation_full_body_tik_tok_2615_img/masks"

filename=os.listdir(image_path)

filename[:5]

def load_img(img_path,mask_path):
  image , mask = tf.io.read_file(img_path),tf.io.read_file(mask_path)
  image , mask = tf.image.decode_png(image), tf.image.decode_png(mask,channels=1)
  image , mask = tf.cast(image,tf.float32), tf.cast(mask,tf.float32)
  image , mask = tf.image.resize(image,(224,224)),tf.image.resize(mask,(224,224))
  image , mask = image/255.0,mask/255.0
  return image,mask

image , mask = load_img(os.path.join())

import keras
from keras.layers import Conv2D, Input, BatchNormalization,MaxPooling2D,Dropout,Conv2DTranspose,concatenate
from keras.models import Model

inputs = Input((224,224,3))
c1 = Conv2D(32,(3,3),activation = 'relu' , kernel_initializer='he_normal',padding='same')(inputs)
c1 = BatchNormalization()(c1)
c1 = Dropout(0.1)(c1)
c1 = Conv2D(32,(3,3),activation = 'relu', kernel_initializer='he_normal',padding='same')(c1)
c1 = BatchNormalization()(c1)
p1 = MaxPooling2D((2,2))(c1)

c2 = Conv2D(64,(3,3),activation = 'relu' , kernel_initializer='he_normal',padding='same')(p1)
c2 = BatchNormalization()(c2)
c2 = Dropout(0.1)(c2)
c2 = Conv2D(64,(3,3),activation = 'relu', kernel_initializer='he_normal',padding='same')(c2)
c2 = BatchNormalization()(c2)
p2 = MaxPooling2D((2,2))(c2)

c3 = Conv2D(128,(3,3),activation = 'relu' , kernel_initializer='he_normal',padding='same')(p2)
c3 = BatchNormalization()(c3)
c3 = Dropout(0.2)(c3)
c3 = Conv2D(128,(3,3),activation = 'relu', kernel_initializer='he_normal',padding='same')(c3)
c3 = BatchNormalization()(c3)
p3 = MaxPooling2D((2,2))(c3)

c4 = Conv2D(256,(3,3),activation = 'relu' ,kernel_initializer='he_normal',padding='same')(p3)
c4 = BatchNormalization()(c4)
c4 = Dropout(0.2)(c4)
c4 = Conv2D(256,(3,3),activation = 'relu', kernel_initializer='he_normal',padding='same')(c4)
c4 = BatchNormalization()(c4)
p4 = MaxPooling2D((2,2))(c4)

c5 = Conv2D(512,(3,3),activation = 'relu' , kernel_initializer='he_normal',padding='same')(p4)
c5 = BatchNormalization()(c5)
c5 = Dropout(0.3)(c5)
c5 = Conv2D(512,(3,3),activation = 'relu', kernel_initializer='he_normal',padding='same')(c5)
c5 = BatchNormalization()(c5)

u6 = Conv2DTranspose(128,(2,2),strides=(2,2),padding='same')(c5)
u6 = concatenate([u6,c4])
c6 = Conv2D(256,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(u6)
c6 = BatchNormalization()(c6)
c6 = Dropout(0.2)(c6)
c6 = Conv2D(256,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(c6)
c6 = BatchNormalization()(c6)

u7 = Conv2DTranspose(64,(2,2),strides=(2,2),padding='same')(c6)
u7 = concatenate([u7,c3])
c7 = Conv2D(128,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(u7)
c7 = BatchNormalization()(c7)
c7 = Dropout(0.2)(c7)
c7 = Conv2D(128,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(c7)
c7 = BatchNormalization()(c7)

u8 = Conv2DTranspose(32,(2,2),strides=(2,2),padding='same')(c7)
u8 = concatenate([u8,c2])
c8 = Conv2D(64,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(u8)
c8 = BatchNormalization()(c8)
c8 = Dropout(0.1)(c8)
c8 = Conv2D(64,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(c8)
c8 = BatchNormalization()(c8)

u9 = Conv2DTranspose(16,(2,2),strides=(2,2),padding='same')(c8)
u9 = concatenate([u9,c1],axis=3)
c9 = Conv2D(32,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(u9)
c9 = BatchNormalization()(c9)
c9 = Dropout(0.1)(c9)
c9 = Conv2D(32,(3,3),activation ='relu',kernel_initializer='he_normal',padding='same')(c9)
c9 = BatchNormalization()(c9)

outputs = Conv2D(1,(1,1),activation = 'sigmoid')(c9)

unet_model = Model(inputs=[inputs],outputs=[outputs])
unet_model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
unet_model.summary()

images=